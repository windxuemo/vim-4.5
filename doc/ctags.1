.TH CTAGS 1 "5 October 1996" "Darren Hiebert"

.SH NAME
ctags \- Generate C language tag files for use with
.BR vi (1)
.SH SYNOPSIS
.TP 6
.B ctags
[
.B \-aBdFnNsStTuwWx
] [
.BI \-f " tagfile"
] [
.BI \-h " list"
]
.br
[
.BI \-i " types"
] [
.BI \-I " ignorelist"
] [
.BI \-L " listfile"
]
.br
[
.BI \-o " tagfile"
] [
.B \--help
] [
.I file(s)
]
.SH DESCRIPTION
.B Ctags
generates an index (or "tag") file of C language objects found in
.I file(s)
that allows these items to be quickly and easily located by a text editor or
other utility. A "tag" signifies a C language object for which an index entry
is available (or, alternatively, the index entry created for that object).
.PP
Alternatively,
.B ctags
can generate a cross reference file which lists, in human readable form,
information about the various objects found in a set of C language files.
.PP
Tag index files are supported by the
.BR vi (1)
editor and its derivatives
(such as
.BR vim ,
.BR elvis ,
.BR stevie ,
and
.BR xvi )
through the use of the ":ta" command, which locates the object associated with
a name appearing in a source file and jumps to the file and line which defines
the name. The following types of tags are supported by 
.B ctags:
.PP
.RS 4
macro definitions (i.e. names created by #define)
.br
enumerated values (i.e. the values inside enum{...})
.br
function definitions
.br
function prototypes or declarations (optional)
.br
class, enum, struct and union tags
.br
typedefs
.br
variables
.RE
.PP
.B Ctags
only generates tags for objects which have global scoping (file-wide
visibility). This means that, with the exception of macro definitions, only
objects defined outside of brace enclosed function blocks are candidates for a
tag. For every one of the qualified objects which are discovered in the source
files supplied to
.BR ctags ,
a separate line is added to the tags file in the following format:
.PP
.PD 0
.RS 4
.TP 4
1.
tag name (a C language identifier)
.TP 4
2.
a single tab character
.TP 4
3.
the name of the file in which the object associated with the tag is located
.TP 4
4.
a single tab character
.TP 4
5.
an Ex command to locate the tag within the file; generally either a search
pattern (either /pattern/ or ?pattern?) or line number
.RE
.PD 1
.PP
Note that, unless changed via
.BR \-n " or " \-N ,
line numbers are only used for tags from macro definitions, while patterns are
used for all other tags.
.PP
Note that the name of each source file will be recorded in the tag file
exactly as it appears on the command line. Therefore, if the path you
specified on the command line was relative to some directory, then it will
be recorded in that same manner in the tag file.
.PP
This version of
.B ctags
imposes no formatting requirements. Other versions of ctags tended to rely
upon certain formatting assumptions in order to help it resolve coding
dilemmas caused by preprocessor conditionals.
.PP
In general,
.B ctags
tries to be smart about conditional preprocessor directives. If a preprocessor
conditional is encountered within a statement which defines a tag,
.B ctags
follows only the first branch of that conditional (except in the special case
of "#if 0", in which case it follows only the last branch). The reason for
this is that failing to pursue only one branch can result in ambiguous syntax,
as in the following
example:
.PP
.RS
#ifdef TWO_ALTERNATIVES
.br
struct {
.br
#else
.br
union {
.br
#endif
.RS 4
short a;
.br
long b;
.RE
}
.RE
.PP
Both branches cannot be followed, or braces become unbalanced and
.B ctags
would be unable to make sense of the syntax.
.PP
If the application of this heuristic fails to properly parse a file,
generally due to complicated and inconsistent pairing within the conditionals,
.B ctags
will retry the file using a different heuristic which does not selectively
follow conditional preprocessor branches, but instead falls back to relying
upon a closing brace ("}") in column 1 as indicating the end of a block once
any brace imbalance is detected within a #if conditional.
.PP
.B Ctags
will also try to specially handle arguments lists enclosed in double sets of
parentheses in order to accept the following conditional construct:
.PP
.RS
extern void foo __ARGS((int one, char two));
.RE
.PP
Any name immediately preceding the "((" will be automatically ignored and
the previous name will be used.
.PP
After creating or appending to the tag file, it is sorted by the tag name,
removing identical tag lines.
.PP
Note that the path recorded for filenames in the tag file and utilized by the
editor to search for tags are identical to the paths specified for 
.I file(s)
on the command line. This means the if you want the paths for files to be
relative to some directory, you must invoke
.B ctags
with the same pathnames for
.IR file(s) .
.SH OPTIONS
.PP
Note that spaces separating options from their parameters are optional.
.TP 5
.B \--help
Prints to standard output a detailed usage description.
.TP 5
.B \-a
Append the tags to an existing tag file.
.TP 5
.B \-B
Use backward searching patterns (?...?).
.TP 5
.B \-d
Include macro definitions in the output file. This is equivalent to
.BI -i +d
and is supported only for backwards compatibility with other versions of
ctags. Use of
.B -i
is preferred.
.TP 5
.BI \-f " tagfile"
Output tags to the specified file (default is "tags"). If
.I tagfile
is specified as "-", then the tag file is written to standard output instead.
.B Ctags
will stubbornly refuse to take orders if
.I tagfile
exists and its first line contains something other than a valid tags line.
This will save your neck if you mistakenly type "ctags -o *.c", which would
otherwise overwrite your first C file with the tags generated by the rest!
.TP 5
.B \-F
Use forward searching patterns (/.../) (default).
.TP 5
.BI \-h  " list"
Specifies a list of file extensions used for headers, separated by either
periods or commas. The default list is ".h.H.hpp.hxx.h++".
.TP 5
.BI \-i " types"
Specifies the list of tag types to include in the output file.
.I Types
is a group of letters designating the types of tags affected. Each letter or
group of letters may be preceded by either a '+' sign (default, if omitted) to
add it to those already included, a '-' sign to exclude it from the list (e.g.
to exclude a default tag type), or an '=' sign to include its corresponding
tag type at the exclusion of those not listed. The following tag types are
supported:
.RS 8
.PD 0
.TP 4
.B d
macro definitions
.TP 4
.B e
enumerated values (values inside enum{...})
.TP 4
.B f
function and method definitions
.TP 4
.B g
enum/struct/union tags (or new C++ types)
.TP 4
.B p
external function prototypes
.TP 4
.B t
typedefs
.TP 4
.B v
variable declarations
.RE
.RS 5
In addition, the following two modifiers are accepted:
.RE
.RS 8
.TP 4
.B P
Prefix static tags (if included) in the tag file with the filename in which
they appear, followed by a colon (Elvis style; not widely supported).
.TP 4
.B S
Include static tags (those not visible outside of a single source file).
Function and variable definitions are considered static only when their
definitions are preceded with the "static" keyword. All other types of tags
are considered static when they appear in a non-header file (see the -h
option).
.RE
.RS 5
The default value of
.I list
is "=defgtvS" (i.e all tag types except for function
prototypes; include static tags but do not prefix them).
.RE
.PD 1
.TP 5
.BI \-I " ignorelist"
Reads a list of names which are to be ignored while generating tags for the
source files. The list may be supplied directly on the command line or found
in a separate file. Normally, the parameter
.I ignorelist
is a list of names to be ignored, each separated with a comma, a semicolon, or
white space (in which case the list should be quoted to keep the entire list
as one command line argument). The parameter
.I ignorelist
will be interpreted as a filename if its first character is given as either
a '.' or a pathname separator ('/' or '\\'). In order to specify a file found
in the current directory, use "./filename".
.RS 5
.PP
This feature is useful when preprocessor macros are used in such a way that
they cause syntactic confusion due to their presence. Some examples will
illustrate this point.
.RE
.PP
.RS
/* creates a global version string in module */
MODULE_VERSION("$Revision: 1.25 $")
.RE
.PP
.RS 5
In this example, the macro invocation looks to much like a function definition
because it is not followed by a semicolon (indeed, it could even be followed
by a global variable definition that would look exactly like a K&R style
function parameter declaration). In fact, this seeming function definition
would likely cause the rest of the file to be skipped over while trying to
complete the definition. Ignoring "MODULE_ID" would avoid such a problem.
.RE
.PP
.RS
int foo ARGDECL2(void *, ptr, long int, nbytes)
.RE
.PP
.RS 5
In this example, the macro "ARGDECL2" would be mistakenly interpreted to be
the name of the function instead of the correct name of "foo". Ignoring the
name "ARGDECL2" results in the correct behavior.
.RE
.TP 5
.BI \-L " listfile"
Read from
.I listfile
a list of file names for which tags should be generated. If
.I listfile
is specified as "-", then file names are read from standard input.
.TP 5
.B \-n
Places into the tag file line numbers in the source file where tags are located
rather than patterns to be searched for. This has three advantages:
.RS 5
.PD 0
.TP 4
1.
Significantly reduces the size of the resulting tag file.
.TP 4
2.
Eliminates failures to find tags because the line defining the tag has
changed, causing the pattern match to fail (note that some editors, such as
.BR vim ,
are able to recover in many such instances).
.TP 4
3.
Eliminates finding identical matching, but incorrect, source lines (see
.BR BUGS ,
below).
.PP
However, this option has one significant drawback: changes to the source files
can cause the line numbers recorded in the tag file to no longer correspond
to the lines in the source file, causing jumps to some tags to miss the target
definition by one or more lines. Basically, this option is best used when the
source code to which it is applied is not subject to change.
See also the
.B \-N
option. Selecting this option causes the following options to be ignored:
.BR \-F ", " \-B " and " \-N .
.PD 1
.RE
.TP 5
.B \-N
Uses search patterns for all tags, rather than the line numbers usually used
for macro definitions. This has the advantage of not referencing obsolete
line numbers when lines have been added or removed since the tag file was
generated. See also the
.B \-n
option. Selecting this option causes the following options to be ignored:
.BR \-F ", " \-B " and " \-n .
.TP 5
.BI \-o " tagfile"
Alternative for
.BR -f "."
.TP 5
.B \-s
Include static tags in the output file, each prefixed with the name of
the file in which it appears followed by a colon. This is equivalent to
.BI -i +SP
and is supported only for backwards compatibility with other versions of
ctags. Use of
.B -i
is preferred.
.TP 5
.B \-S
Include static tags in the output file, but do not prefix them, thereby
making them appear the same as global tags. This is equivalent to
.BI -i +S-P
and is supported only for backwards compatibility with other versions of
ctags. Use of
.B -i
is preferred.
.TP 5
.B \-t
Include typedefs in the output file. This is equivalent to
.BI -i +t
and is supported only for backwards compatibility with other versions of
ctags. Use of
.B -i
is preferred.
.TP 5
.B \-T
Include typedefs and class/enum/struct/union tags in the output file.
This is equivalent to
.BI -i +tg
and is supported only for backwards compatibility with other versions of
ctags. Use of
.B -i
is preferred.
.TP 5
.B \-u
Unsorted; do not sort the tags. Please note that this disables the warning
messages normally enabled by
.BR \-W ,
because sorted tags are used to detect duplicate tags. Note also that
.BR vi (1)
requires sorted tags.
.TP 5
.B \-w
Exclude warnings about duplicate tags (default).
.TP 5
.B \-W
Generate warnings about duplicate tags.
.TP 5
.B \-x
Print a tabular, human-readable cross reference (xref) file to standard
output. The information contained in the output includes: the tag name; the
tag type; the line number, file name, and source line (with extra white space
condensed) of the file which defines the tag. No tag file is written and the
following options will be ignored:
.BR \-a ", " \-f ", " \-i+P ", " \-n ", " \-o ", " \-B " and " \-F .
Example applications for this feature are generating a listing of all
functions (including statics) located in a source file (e.g.
.B "ctags -xi=fS "
.IR "file" "),"
or generating a list of all externally visible global variables located in a
source file (e.g.
.B "ctags -xi=v "
.IR "file" ")."
.SH "ENVIRONMENT VARIABLES"
.TP 8
.B CTAGS
If found, this variable will be assumed to contain a set of custom default
options which are read when
.B ctags
starts, but before any command line options are read. Options in this variable
should be in the same form as those on the command line. Command line options
will override options specified in this variable. Only options may be
specified with this variable; no source file names are read from its value.
.SH "HOW TO USE WITH VI"
Vi will, by default, expect a tag file by the name "tags" in the current
directory. Once the tag file is build, the following vi commands take
exercise the tag indexing feature:
.TP 12
vi -t tag
Start vi and position the cursor at the file and line where "tag" is defined.
.TP 12
Control-]
Find the tag under the cursor.
.TP 12
:ta tag
Find a tag.
.TP 12
Control-T
Return to previous location before jump to tag (not widely implemented).
.SH BUGS
Support for C++ features is quite limited.
.PP
Because
.B ctags
does not look inside brace enclosed function blocks, local declarations
of class/enum/struct/union tags and enumeration values within a function will
not have tags generated for them.
.PP
Note that because
.B ctags
generates search patterns for non-macro tags, it is entirely possible that
the wrong line may be found by your editor if there exists another, identical,
line (whose context prevents it from generating a tag) which is identical to
the line containing the tag. The following example demonstrates this
condition:
.PP
.RS
int variable;

/* ... */
.br
void foo(variable)
.br
int variable;
.br
{
.RS 4
/* ... */
.RE
}
.RE
.PP
Depending upon which editor you use and where in the code you happen to be, it
is possible that the search pattern may locate the local parameter declaration
in foo() before it finds the actual global variable definition, since the
lines (and therefore their search patterns are identical). This can be avoided
by use of the
.B \-n
option.
.PP
Because
.B ctags
is neither a preprocessor nor a compiler, some complex or obscure constructs
can fool
.B ctags
into either missing a tag or improperly generating an inappropriate tag. In
particular, the use of preprocessor constructs which alter the textual syntax
of C can fool
.BR ctags ,
as demonstrated by the following example:
.PP
.RS
#ifdef GLOBAL
.br
#define EXTERN
.br
#define INIT(assign)  assign
.br
#else
.br
#define EXTERN extern
.br
#define INIT(assign)
.br
#endif
.br

EXTERN BUF *firstbuf INIT(= NULL);
.RE
.PP
This looks too much like a declaration for a function called "INIT",
which returns a pointer to a typedef "firstbuf", rather than the actual
variable definition that it is, since this distinction can only be
resolved by the preprocessor. The moral of the story: don't do this if
you want a tag generated for it, or use the
.B \-I
option to specify "INIT" as a keyword to be ignored.
.SH FILES
.TP 10
.I tags
The default tag file created by
.BR ctags .
.SH "SEE ALSO"
The official Exuberant Ctags web site at:
.PP
.RS 4
http://fly.hiwaay.net/~darren/ctags.html
.RE
.PP
Also
.BR ex (1),
.BR vi (1),
.BR elvis ,
or, better yet,
.BR vim ,
the official editor of
.BR ctags .
For more information on
.BR vim ,
see the VIM Pages web site at:
.PP
.RS 4
http://www.math.fu-berlin.de/~guckes/vim/
.RE
.SH AUTHOR
Darren Hiebert, (darren@sirsi.com, darren@hiwaay.net, 
http://fly.hiwaay.net/~darren)
.SH MOTIVATION
"Think ye at all times of rendering some service to every member of the human
race."
.PP
"All effort and exertion put forth by man from the fullness of his heart is
worship, if it is prompted by the highest motives and the will to do service
to humanity."
.PP
.RS 10
\-- From the Baha'i Writings
.SH CREDITS
This version of
.B ctags
is derived from and inspired by the ctags program by Steve Kirkendall
(kirkenda@cs.pdx.edu) that comes with the Elvis vi clone (though almost
none of the original code remains).
.PP
Credit is also due Bram Moolenaar, the author of
.BR vim ,
who has devoted so much of his time and energy both to developing the editor
as a service to others, and to helping the orphans of Uganda. 
